<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Document Generator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Firebase App (the core Firebase SDK) -->
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <!-- Firebase Firestore -->
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
            --success: #2ecc71;
            --warning: #f39c12;
            --danger: #e74c3c;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7f9;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 2rem 0;
            text-align: center;
            border-radius: 10px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        
        header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .card {
            background: white;
            border-radius: 10px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--dark);
        }
        
        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
            transition: border 0.3s ease;
        }
        
        input:focus, select:focus, textarea:focus {
            border-color: var(--secondary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            background-color: var(--secondary);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary {
            background-color: var(--primary);
        }
        
        .btn-primary:hover {
            background-color: #1a252f;
        }
        
        .btn-success {
            background-color: var(--success);
        }
        
        .btn-success:hover {
            background-color: #27ae60;
        }
        
        .btn-danger {
            background-color: var(--danger);
        }
        
        .btn-danger:hover {
            background-color: #c0392b;
        }
        
        .document-type {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .doc-type-btn {
            flex: 1;
            text-align: center;
            padding: 1.5rem;
            background: white;
            border: 2px solid #ddd;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .doc-type-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .doc-type-btn.active {
            border-color: var(--secondary);
            background-color: rgba(52, 152, 219, 0.1);
        }
        
        .doc-type-btn i {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: var(--secondary);
        }
        
        .items-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }
        
        .items-table th, .items-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .items-table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        
        .tax-summary {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 2px solid #ddd;
        }
        
        .tax-row {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
        }
        
        .tax-row.total {
            font-weight: bold;
            font-size: 1.2rem;
            border-top: 1px solid #ddd;
            padding-top: 1rem;
            margin-top: 1rem;
        }
        
        .preview-container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            margin-top: 2rem;
        }
        
        .document-preview {
            border: 1px solid #ddd;
            padding: 2rem;
            min-height: 400px;
            background: white;
        }
        
        .invoice-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
        }
        
        .company-info h2 {
            color: var(--primary);
            margin-bottom: 0.5rem;
        }
        
        .document-title {
            text-align: center;
            margin: 2rem 0;
            color: var(--primary);
            text-transform: uppercase;
            letter-spacing: 2px;
        }
        
        .document-details {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
        }
        
        .client-info {
            width: 48%;
        }
        
        .document-info {
            width: 48%;
            text-align: right;
        }
        
        .actions {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem;
            background: var(--success);
            color: white;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        @media (max-width: 768px) {
            .document-type {
                flex-direction: column;
            }
            
            .document-details {
                flex-direction: column;
            }
            
            .client-info, .document-info {
                width: 100%;
                text-align: left;
            }
            
            .actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Professional Document Generator</h1>
            <p>Create invoices, receipts, and vouchers with ease</p>
        </header>
        
        <div class="card">
            <h2>Select Document Type</h2>
            <div class="document-type">
                <div class="doc-type-btn active" data-type="invoice">
                    <i>ðŸ“„</i>
                    <h3>Invoice</h3>
                    <p>Bill for products/services</p>
                </div>
                <div class="doc-type-btn" data-type="receipt">
                    <i>ðŸ§¾</i>
                    <h3>Receipt</h3>
                    <p>Payment confirmation</p>
                </div>
                <div class="doc-type-btn" data-type="voucher">
                    <i>ðŸŽ«</i>
                    <h3>Voucher</h3>
                    <p>Discount or gift certificate</p>
                </div>
            </div>
            
            <h2>Basic Details</h2>
            <div class="form-group">
                <label for="companyName">Your Company Name</label>
                <input type="text" id="companyName" placeholder="Enter your company name">
            </div>
            
            <div class="form-group">
                <label for="companyAddress">Your Company Address</label>
                <textarea id="companyAddress" rows="3" placeholder="Enter your company address"></textarea>
            </div>
            
            <div class="form-group">
                <label for="clientName">Client Name</label>
                <input type="text" id="clientName" placeholder="Enter client name">
            </div>
            
            <div class="form-group">
                <label for="clientAddress">Client Address</label>
                <textarea id="clientAddress" rows="3" placeholder="Enter client address"></textarea>
            </div>
            
            <div class="form-group">
                <label for="documentNumber">Document Number</label>
                <input type="text" id="documentNumber" placeholder="e.g., INV-001">
            </div>
            
            <div class="form-group">
                <label for="issueDate">Issue Date</label>
                <input type="date" id="issueDate">
            </div>
            
            <div id="dueDateField" class="form-group">
                <label for="dueDate">Due Date</label>
                <input type="date" id="dueDate">
            </div>
            
            <h2>Items</h2>
            <table class="items-table">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Tax</th>
                        <th>Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="itemsList">
                    <tr>
                        <td><input type="text" class="item-desc" placeholder="Item description"></td>
                        <td><input type="number" class="item-qty" value="1" min="1"></td>
                        <td><input type="number" class="item-price" placeholder="0.00" step="0.01" min="0"></td>
                        <td>
                            <select class="item-tax">
                                <option value="0">0%</option>
                                <option value="10">10%</option>
                                <option value="18">18%</option>
                                <option value="20">20%</option>
                            </select>
                        </td>
                        <td class="item-total">0.00</td>
                        <td><button class="btn btn-danger remove-item">Remove</button></td>
                    </tr>
                </tbody>
            </table>
            
            <button id="addItem" class="btn">+ Add Item</button>
            
            <div class="tax-summary">
                <div class="tax-row">
                    <span>Subtotal:</span>
                    <span id="subtotal">0.00</span>
                </div>
                <div class="tax-row">
                    <span>Tax (10%):</span>
                    <span id="tax10">0.00</span>
                </div>
                <div class="tax-row">
                    <span>Tax (18%):</span>
                    <span id="tax18">0.00</span>
                </div>
                <div class="tax-row">
                    <span>Tax (20%):</span>
                    <span id="tax20">0.00</span>
                </div>
                <div class="tax-row total">
                    <span>Grand Total:</span>
                    <span id="grandTotal">0.00</span>
                </div>
            </div>
            
            <div class="actions">
                <button id="generatePdf" class="btn btn-primary">Generate PDF</button>
                <button id="saveToFirebase" class="btn btn-success">Save to Firebase</button>
                <button id="resetForm" class="btn btn-danger">Reset Form</button>
            </div>
        </div>
        
        <div class="preview-container">
            <h2>Document Preview</h2>
            <div class="document-preview" id="documentPreview">
                <div class="invoice-header">
                    <div class="company-info">
                        <h2 id="previewCompanyName">Your Company Name</h2>
                        <p id="previewCompanyAddress">Company Address</p>
                    </div>
                    <div class="document-type-label">
                        <h1 id="previewDocType">INVOICE</h1>
                    </div>
                </div>
                
                <div class="document-details">
                    <div class="client-info">
                        <h3>Bill To:</h3>
                        <p id="previewClientName">Client Name</p>
                        <p id="previewClientAddress">Client Address</p>
                    </div>
                    
                    <div class="document-info">
                        <p><strong>Document Number:</strong> <span id="previewDocNumber">INV-001</span></p>
                        <p><strong>Issue Date:</strong> <span id="previewIssueDate">01/01/2023</span></p>
                        <p id="previewDueDate"><strong>Due Date:</strong> 01/15/2023</p>
                    </div>
                </div>
                
                <table class="items-table">
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Tax</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody id="previewItemsList">
                        <tr>
                            <td colspan="5" style="text-align: center;">No items added</td>
                        </tr>
                    </tbody>
                </table>
                
                <div class="tax-summary">
                    <div class="tax-row">
                        <span>Subtotal:</span>
                        <span id="previewSubtotal">0.00</span>
                    </div>
                    <div class="tax-row">
                        <span>Tax (10%):</span>
                        <span id="previewTax10">0.00</span>
                    </div>
                    <div class="tax-row">
                        <span>Tax (18%):</span>
                        <span id="previewTax18">0.00</span>
                    </div>
                    <div class="tax-row">
                        <span>Tax (20%):</span>
                        <span id="previewTax20">0.00</span>
                    </div>
                    <div class="tax-row total">
                        <span>Grand Total:</span>
                        <span id="previewGrandTotal">0.00</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="notification" id="notification">
        Document saved successfully!
    </div>

    <script>
        // Firebase configuration (replace with your own config)
        const firebaseConfig = {
            apiKey: "YOUR_API_KEY",
            authDomain: "your-project.firebaseapp.com",
            projectId: "your-project-id",
            storageBucket: "your-project.appspot.com",
            messagingSenderId: "123456789",
            appId: "YOUR_APP_ID"
        };
        
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        
        // DOM Elements
        const docTypeButtons = document.querySelectorAll('.doc-type-btn');
        const dueDateField = document.getElementById('dueDateField');
        const itemsList = document.getElementById('itemsList');
        const addItemBtn = document.getElementById('addItem');
        const generatePdfBtn = document.getElementById('generatePdf');
        const saveToFirebaseBtn = document.getElementById('saveToFirebase');
        const resetFormBtn = document.getElementById('resetForm');
        const notification = document.getElementById('notification');
        
        // Set current date as default for issue date
        document.getElementById('issueDate').valueAsDate = new Date();
        
        // Set due date to 15 days from now
        const dueDate = new Date();
        dueDate.setDate(dueDate.getDate() + 15);
        document.getElementById('dueDate').valueAsDate = dueDate;
        
        // Document type selection
        docTypeButtons.forEach(button => {
            button.addEventListener('click', () => {
                docTypeButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                const docType = button.dataset.type;
                document.getElementById('previewDocType').textContent = docType.toUpperCase();
                
                // Show/hide due date based on document type
                if (docType === 'invoice') {
                    dueDateField.style.display = 'block';
                    document.getElementById('previewDueDate').style.display = 'block';
                } else {
                    dueDateField.style.display = 'none';
                    document.getElementById('previewDueDate').style.display = 'none';
                }
                
                updatePreview();
            });
        });
        
        // Add new item row
        addItemBtn.addEventListener('click', () => {
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td><input type="text" class="item-desc" placeholder="Item description"></td>
                <td><input type="number" class="item-qty" value="1" min="1"></td>
                <td><input type="number" class="item-price" placeholder="0.00" step="0.01" min="0"></td>
                <td>
                    <select class="item-tax">
                        <option value="0">0%</option>
                        <option value="10">10%</option>
                        <option value="18">18%</option>
                        <option value="20">20%</option>
                    </select>
                </td>
                <td class="item-total">0.00</td>
                <td><button class="btn btn-danger remove-item">Remove</button></td>
            `;
            itemsList.appendChild(newRow);
            
            // Add event listeners to new inputs
            const inputs = newRow.querySelectorAll('input, select');
            inputs.forEach(input => {
                input.addEventListener('input', calculateTotals);
            });
            
            newRow.querySelector('.remove-item').addEventListener('click', () => {
                newRow.remove();
                calculateTotals();
            });
        });
        
        // Calculate item totals
        function calculateItemTotal(row) {
            const qty = parseFloat(row.querySelector('.item-qty').value) || 0;
            const price = parseFloat(row.querySelector('.item-price').value) || 0;
            const tax = parseFloat(row.querySelector('.item-tax').value) || 0;
            
            const subtotal = qty * price;
            const taxAmount = subtotal * (tax / 100);
            const total = subtotal + taxAmount;
            
            row.querySelector('.item-total').textContent = total.toFixed(2);
            
            return { subtotal, tax, taxAmount, total };
        }
        
        // Calculate all totals
        function calculateTotals() {
            const rows = itemsList.querySelectorAll('tr');
            let subtotal = 0;
            let tax10 = 0;
            let tax18 = 0;
            let tax20 = 0;
            let grandTotal = 0;
            
            rows.forEach(row => {
                const item = calculateItemTotal(row);
                subtotal += item.subtotal;
                grandTotal += item.total;
                
                if (item.tax === 10) tax10 += item.taxAmount;
                if (item.tax === 18) tax18 += item.taxAmount;
                if (item.tax === 20) tax20 += item.taxAmount;
            });
            
            // Update summary
            document.getElementById('subtotal').textContent = subtotal.toFixed(2);
            document.getElementById('tax10').textContent = tax10.toFixed(2);
            document.getElementById('tax18').textContent = tax18.toFixed(2);
            document.getElementById('tax20').textContent = tax20.toFixed(2);
            document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
            
            updatePreview();
        }
        
        // Update preview
        function updatePreview() {
            // Update company info
            document.getElementById('previewCompanyName').textContent = document.getElementById('companyName').value || 'Your Company Name';
            document.getElementById('previewCompanyAddress').textContent = document.getElementById('companyAddress').value || 'Company Address';
            
            // Update client info
            document.getElementById('previewClientName').textContent = document.getElementById('clientName').value || 'Client Name';
            document.getElementById('previewClientAddress').textContent = document.getElementById('clientAddress').value || 'Client Address';
            
            // Update document info
            document.getElementById('previewDocNumber').textContent = document.getElementById('documentNumber').value || 'INV-001';
            
            const issueDate = document.getElementById('issueDate').value;
            if (issueDate) {
                const date = new Date(issueDate);
                document.getElementById('previewIssueDate').textContent = date.toLocaleDateString();
            }
            
            const dueDate = document.getElementById('dueDate').value;
            if (dueDate) {
                const date = new Date(dueDate);
                document.getElementById('previewDueDate').innerHTML = `<strong>Due Date:</strong> ${date.toLocaleDateString()}`;
            }
            
            // Update items in preview
            const previewItemsList = document.getElementById('previewItemsList');
            previewItemsList.innerHTML = '';
            
            const rows = itemsList.querySelectorAll('tr');
            if (rows.length === 0) {
                previewItemsList.innerHTML = '<tr><td colspan="5" style="text-align: center;">No items added</td></tr>';
            } else {
                rows.forEach(row => {
                    const desc = row.querySelector('.item-desc').value || 'Item';
                    const qty = row.querySelector('.item-qty').value || 0;
                    const price = parseFloat(row.querySelector('.item-price').value || 0).toFixed(2);
                    const tax = row.querySelector('.item-tax').value || 0;
                    const total = row.querySelector('.item-total').textContent;
                    
                    const newRow = document.createElement('tr');
                    newRow.innerHTML = `
                        <td>${desc}</td>
                        <td>${qty}</td>
                        <td>${price}</td>
                        <td>${tax}%</td>
                        <td>${total}</td>
                    `;
                    previewItemsList.appendChild(newRow);
                });
            }
            
            // Update totals in preview
            document.getElementById('previewSubtotal').textContent = document.getElementById('subtotal').textContent;
            document.getElementById('previewTax10').textContent = document.getElementById('tax10').textContent;
            document.getElementById('previewTax18').textContent = document.getElementById('tax18').textContent;
            document.getElementById('previewTax20').textContent = document.getElementById('tax20').textContent;
            document.getElementById('previewGrandTotal').textContent = document.getElementById('grandTotal').textContent;
        }
        
        // Generate PDF
        generatePdfBtn.addEventListener('click', () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Get the preview element
            const preview = document.getElementById('documentPreview');
            
            // Use html2canvas to capture the preview as an image
            html2canvas(preview).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const imgWidth = doc.internal.pageSize.getWidth();
                let imgHeight = canvas.height * imgWidth / canvas.width;
                
                // Add image to PDF
                doc.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                
                // Save the PDF
                const docType = document.querySelector('.doc-type-btn.active').dataset.type;
                const docNumber = document.getElementById('documentNumber').value || 'document';
                doc.save(`${docType}-${docNumber}.pdf`);
            });
        });
        
        // Save to Firebase
        saveToFirebaseBtn.addEventListener('click', () => {
            const docType = document.querySelector('.doc-type-btn.active').dataset.type;
            const companyName = document.getElementById('companyName').value;
            const companyAddress = document.getElementById('companyAddress').value;
            const clientName = document.getElementById('clientName').value;
            const clientAddress = document.getElementById('clientAddress').value;
            const documentNumber = document.getElementById('documentNumber').value;
            const issueDate = document.getElementById('issueDate').value;
            const dueDate = document.getElementById('dueDate').value;
            
            // Collect items
            const items = [];
            const rows = itemsList.querySelectorAll('tr');
            rows.forEach(row => {
                items.push({
                    description: row.querySelector('.item-desc').value,
                    quantity: parseFloat(row.querySelector('.item-qty').value),
                    price: parseFloat(row.querySelector('.item-price').value),
                    tax: parseFloat(row.querySelector('.item-tax').value)
                });
            });
            
            // Calculate totals
            const subtotal = parseFloat(document.getElementById('subtotal').textContent);
            const tax10 = parseFloat(document.getElementById('tax10').textContent);
            const tax18 = parseFloat(document.getElementById('tax18').textContent);
            const tax20 = parseFloat(document.getElementById('tax20').textContent);
            const grandTotal = parseFloat(document.getElementById('grandTotal').textContent);
            
            // Create document data
            const documentData = {
                type: docType,
                companyName,
                companyAddress,
                clientName,
                clientAddress,
                documentNumber,
                issueDate,
                dueDate: docType === 'invoice' ? dueDate : null,
                items,
                subtotal,
                taxes: {
                    tax10,
                    tax18,
                    tax20
                },
                grandTotal,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            // Save to Firestore
            db.collection('documents').add(documentData)
                .then(docRef => {
                    showNotification('Document saved successfully!');
                })
                .catch(error => {
                    console.error('Error saving document: ', error);
                    showNotification('Error saving document. Please try again.', 'error');
                });
        });
        
        // Reset form
        resetFormBtn.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset the form? All data will be lost.')) {
                document.querySelectorAll('input, textarea').forEach(input => {
                    input.value = '';
                });
                
                // Reset date fields
                document.getElementById('issueDate').valueAsDate = new Date();
                const dueDate = new Date();
                dueDate.setDate(dueDate.getDate() + 15);
                document.getElementById('dueDate').valueAsDate = dueDate;
                
                // Reset items
                itemsList.innerHTML = `
                    <tr>
                        <td><input type="text" class="item-desc" placeholder="Item description"></td>
                        <td><input type="number" class="item-qty" value="1" min="1"></td>
                        <td><input type="number" class="item-price" placeholder="0.00" step="0.01" min="0"></td>
                        <td>
                            <select class="item-tax">
                                <option value="0">0%</option>
                                <option value="10">10%</option>
                                <option value="18">18%</option>
                                <option value="20">20%</option>
                            </select>
                        </td>
                        <td class="item-total">0.00</td>
                        <td><button class="btn btn-danger remove-item">Remove</button></td>
                    </tr>
                `;
                
                // Reattach event listeners
                attachEventListeners();
                
                calculateTotals();
                updatePreview();
            }
        });
        
        // Show notification
        function showNotification(message, type = 'success') {
            notification.textContent = message;
            notification.style.backgroundColor = type === 'success' ? '#2ecc71' : '#e74c3c';
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // Attach event listeners to inputs
        function attachEventListeners() {
            document.querySelectorAll('input, select, textarea').forEach(input => {
                input.addEventListener('input', updatePreview);
            });
            
            document.querySelectorAll('.item-desc, .item-qty, .item-price, .item-tax').forEach(input => {
                input.addEventListener('input', calculateTotals);
            });
            
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('tr').remove();
                    calculateTotals();
                });
            });
        }
        
        // Initialize
        attachEventListeners();
        calculateTotals();
        updatePreview();
    </script>
</body>
</html>